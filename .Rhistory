# simulate data according to Section 5.1 of report
S <- 5 # sparse factors
D <- 1 # dense factors
K <- S + D
N <- 100
G <- 800
set.seed(2)
data <- sim.sfm(K=K, N=N, G=G,
zmat = matrix(c(rep(0, 30 * G / 40), rep(1, 1 * G / 40), rep(0, 5 * G / 40), rep(1, 1 * G / 40), rep(0, 2 * G / 40),rep(1, 1 * G / 40),
rep(0, 6 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 1 * G / 40), rep(0, 1 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 3 * G / 40), rep(0, 1 * G / 40),
rep(1, 1 * G / 40), rep(0, 4 * G / 40), rep(1, 1 * G / 40), rep(0, 14 * G / 40), rep(1, 2 * G / 40), rep(0, 8 * G / 40), rep(1, 6 * G / 40), rep(0, 4 * G / 40),
rep(1, 5 * G / 40), rep(0, 15 * G / 40), rep(1, 10 * G / 40), rep(0, 10 * G / 40),
rep(1, 20 * G / 40), rep(0, 20 * G / 40),
rep(1, G)),
nrow=G, ncol=K),
alphavec=rep(1, K), snr=5)
sim.sfm <- function(lmat=NULL, tauvec=NULL, fmat=NULL, zmat=NULL, alphavec=NULL,
G=20, N=10, K=4, pivec=NULL, snr=NULL,
taushape=100, taurate=1, alphashape=1, alpharate=1) {
# infer dimensions
if(!is.null(lmat)) {
ldim <- dim(lmat)
G <- ldim[1]
K <- ldim[2]
}
if(!is.null(tauvec)) G <- length(tauvec)
if(!is.null(fmat)) {
fdim <- dim(fmat)
K <- fdim[1]
N <- fdim[2]
}
if(!is.null(zmat)) {
zdim <- dim(zmat)
G <- zdim[1]
K <- zdim[2]
}
if(!is.null(alphavec)) K <- length(alphavec)
if(!is.null(pivec)) K <- length(pivec)
# simulate parameters
if(is.null(lmat)) {
if(is.null(zmat)) {
# first half of factors are dense, second half are sparse
if(is.null(pivec)) pivec <- c(rep(0.9, K %/% 2), rep(0.1, K - K %/% 2))
zmat <- sapply(pivec, simulate.z.col, G=G)
}
if(is.null(alphavec)) alphavec <- rgamma(K, alphashape, alpharate)
lmat <- zmat * sapply(alphavec, function(alpha) rnorm(G, 0, 1 / sqrt(alpha)))
}
if(is.null(fmat)) fmat <- matrix(rnorm(K * N), nrow=K, ncol=N)
lf <- lmat %*% fmat
# simulate tau
if(is.null(tauvec)) {
if(is.null(snr)) tauvec <- rgamma(G, taushape, taurate)
else {
tauvec <- snr / matrixStats::rowVars(lf)
tau.na <- !is.finite(tauvec)
tauvec[tau.na] <- rgamma(sum(tau.na), taushape, taurate)
}
}
# simulate y
ymat <- lf + t(sapply(tauvec, function(tau) rnorm(N, 0, 1 / sqrt(tau))))
return (list(ymat=ymat, lmat=lmat, fmat=fmat, zmat=zmat, tauvec=tauvec, alphavec=alphavec))
}
source(sim_sfm)
source('sim_sfm.R')
source('scripts/sim_sfm.R')
# simulate data according to Section 5.1 of report
S <- 5 # sparse factors
D <- 1 # dense factors
K <- S + D
N <- 100
G <- 800
set.seed(2)
data <- sim.sfm(K=K, N=N, G=G,
zmat = matrix(c(rep(0, 30 * G / 40), rep(1, 1 * G / 40), rep(0, 5 * G / 40), rep(1, 1 * G / 40), rep(0, 2 * G / 40),rep(1, 1 * G / 40),
rep(0, 6 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 1 * G / 40), rep(0, 1 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 3 * G / 40), rep(0, 1 * G / 40),
rep(1, 1 * G / 40), rep(0, 4 * G / 40), rep(1, 1 * G / 40), rep(0, 14 * G / 40), rep(1, 2 * G / 40), rep(0, 8 * G / 40), rep(1, 6 * G / 40), rep(0, 4 * G / 40),
rep(1, 5 * G / 40), rep(0, 15 * G / 40), rep(1, 10 * G / 40), rep(0, 10 * G / 40),
rep(1, 20 * G / 40), rep(0, 20 * G / 40),
rep(1, G)),
nrow=G, ncol=K),
alphavec=rep(1, K), snr=5)
data
levelplot(t(data$zmat),
at=seq(0,1,0.05), aspect=2, col.regions=viridis(100),
ylim=0.5+c(G,0), scales=list(y=list(at=c())),
colorkey=list(width=1),
main=list(label="Connectivity matrix (truth)\n", cex=1),
xlab="Factors",
ylab="800 features",
par.settings=list(layout.heights=list(axis.top=0.5))))
levelplot(t(data$zmat),
at=seq(0,1,0.05), aspect=2, col.regions=viridis(100),
ylim=0.5+c(G,0), scales=list(y=list(at=c())),
colorkey=list(width=1),
main=list(label="Connectivity matrix (truth)\n", cex=1),
xlab="Factors",
ylab="800 features",
par.settings=list(layout.heights=list(axis.top=0.5)))
library(viridis)
library(lattice)
levelplot(t(data$zmat),
at=seq(0,1,0.05), aspect=2, col.regions=viridis(100),
ylim=0.5+c(G,0), scales=list(y=list(at=c())),
colorkey=list(width=1),
main=list(label="Connectivity matrix (truth)\n", cex=1),
xlab="Factors",
ylab="800 features",
par.settings=list(layout.heights=list(axis.top=0.5)))
install.packages('arrow')
install.packages('arrow')
source('scripts/utils.R')
# simulate data according to Section 5.1 of report
S <- 5 # sparse factors
D <- 1 # dense factors
K <- S + D
N <- 100
G <- 800
ymat_list <- list()
lmat_list <- list()
zmat_list <- list()
tauvec_list <- list()
alphavec_list <- list()
for (t in 1:T) {
# Run the simulation for each t
data_t <- sim.sfm(K=K, N=N, G=G,
zmat = matrix(c(rep(0, 30 * G / 40), rep(1, 1 * G / 40), rep(0, 5 * G / 40), rep(1, 1 * G / 40), rep(0, 2 * G / 40), rep(1, 1 * G / 40),
rep(0, 6 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 1 * G / 40), rep(0, 1 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 3 * G / 40), rep(0, 1 * G / 40),
rep(1, 1 * G / 40), rep(0, 4 * G / 40), rep(1, 1 * G / 40), rep(0, 14 * G / 40), rep(1, 2 * G / 40), rep(0, 8 * G / 40), rep(1, 6 * G / 40), rep(0, 4 * G / 40),
rep(1, 5 * G / 40), rep(0, 15 * G / 40), rep(1, 10 * G / 40), rep(0, 10 * G / 40),
rep(1, 20 * G / 40), rep(0, 20 * G / 40),
rep(1, G)),
nrow=G, ncol=K),
alphavec=rep(1, K), snr=5)
# Concatenate results over t
ymat_list[[t]] <- data_t$ymat
lmat_list[[t]] <- data_t$lmat
zmat_list[[t]] <- data_t$zmat
tauvec_list[[t]] <- data_t$tauvec
alphavec_list[[t]] <- data_t$alphavec
}
# Concatenate all matrices
ymat_combined <- do.call(rbind, ymat_list)
lmat_combined <- do.call(rbind, lmat_list)
zmat_combined <- do.call(rbind, zmat_list)
tauvec_combined <- do.call(c, tauvec_list)  # assuming tauvec is a vector
alphavec_combined <- do.call(c, alphavec_list)  # assuming alphavec is a vector
# Save results to the specified directory in Arrow format
output_dir <- normalizePath(output_dir, mustWork = FALSE)
output_dir <- 'data/synthetic/no_changea'
output_dir <- 'data/synthetic/no_change'
# Save results to the specified directory in Arrow format
output_dir <- normalizePath(output_dir, mustWork = FALSE)
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Write each matrix to Arrow format (Feather or Parquet)
write_feather(as.data.frame(ymat_combined), file.path(output_dir, "ymat.feather"))
library(arrow)
# Write each matrix to Arrow format (Feather or Parquet)
write_feather(as.data.frame(ymat_combined), file.path(output_dir, "ymat.feather"))
write_feather(as.data.frame(lmat_combined), file.path(output_dir, "lmat.feather"))
write_feather(as.data.frame(zmat_combined), file.path(output_dir, "zmat.feather"))
write_feather(as.data.frame(tauvec_combined), file.path(output_dir, "tauvec.feather"))
write_feather(as.data.frame(alphavec_combined), file.path(output_dir, "alphavec.feather"))
plot_faceted_zmat(zmat_list, G, K)
plot_faceted_zmat <- function(zmat_list, G, K) {
# Create a combined data frame with an additional column for faceting (t)
zmat_combined <- do.call(rbind, lapply(seq_along(zmat_list), function(t) {
zmat_t <- zmat_list[[t]]
data.frame(feature = rep(1:G, K),
factor = rep(1:K, each=G),
value = as.vector(t(zmat_t)),
t = factor(t))  # Use factor to facet by t
}))
# Generate the faceted level plot
levelplot(value ~ factor * feature | t, data=zmat_combined,
at=seq(0, 1, 0.05), aspect=2, col.regions=viridis(100),
ylim=0.5 + c(G, 0), scales=list(y=list(at=c())),
colorkey=list(width=1),
main=list(label="Connectivity matrix (truth)\n", cex=1),
xlab="Factors", ylab="Features",
par.settings=list(layout.heights=list(axis.top=0.5)),
layout=c(5, ceiling(length(zmat_list)/5)))  # Customize the layout as needed
}
plot_faceted_zmat(zmat_list, G, K)
T <- 5
source("~/Documents/Coding/hmm-factor-analysis/scripts/gen_data_nochange.R")
plot_faceted_zmat(zmat_list, G, K)
plot_faceted_zmat <- function(zmat_list, G, K) {
# Create a combined data frame with an additional column for faceting (t)
zmat_combined <- do.call(rbind, lapply(seq_along(zmat_list), function(t) {
zmat_t <- zmat_list[[t]]
# Convert each matrix into a long-format data frame
expand.grid(factor = 1:K, feature = 1:G) %>%
transform(value = as.vector(t(zmat_t)), t = as.factor(t))
}))
# Generate the faceted level plot
levelplot(value ~ factor * feature | t, data=zmat_combined,
at=seq(0, 1, 0.05), aspect=2, col.regions=viridis(100),
ylim=0.5 + c(G, 0), scales=list(y=list(at=c())),
colorkey=list(width=1),
main=list(label="Connectivity matrix (truth)\n", cex=1),
xlab="Factors", ylab="Features",
par.settings=list(layout.heights=list(axis.top=0.5)),
layout=c(5, ceiling(length(zmat_list)/5)))  # Customize the layout as needed
}
plot_faceted_zmat(zmat_list, G, K)
png(filename = file.path(output_dir, "connectivities.png"),
width = 1500,
height = 1000,
res = 150)
plot_faceted_zmat(zmat_list, G, K)
dev.off()
png(filename = file.path(output_dir, "connectivities.png"),
width = 1500,
height = 1000,
res = 200)
plot_faceted_zmat(zmat_list, G, K)
dev.off()
png(filename = file.path(output_dir, "connectivities.png"),
width = 1500,
height = 1000,
res = 250)
plot_faceted_zmat(zmat_list, G, K)
dev.off()
source('scripts/utils.R')
library(viridis)
library(lattice)
library(arrow)
library(dplyr)
set.seed(2)
# simulate data according to Section 5.1 of report
S <- 5 # sparse factors
D <- 1 # dense factors
K <- S + D
N <- 100
G <- 800
T <- 5
output_dir <- 'data/synthetic/no_change'
ymat_list <- list()
lmat_list <- list()
zmat_list <- list()
tauvec_list <- list()
alphavec_list <- list()
for (t in 1:T) {
# Run the simulation for each t
data_t <- sim.sfm(K=K, N=N, G=G,
zmat = matrix(c(rep(0, 30 * G / 40), rep(1, 1 * G / 40), rep(0, 5 * G / 40), rep(1, 1 * G / 40), rep(0, 2 * G / 40), rep(1, 1 * G / 40),
rep(0, 6 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 1 * G / 40), rep(0, 1 * G / 40), rep(1, 1 * G / 40), rep(0, 13 * G / 40), rep(1, 3 * G / 40), rep(0, 1 * G / 40),
rep(1, 1 * G / 40), rep(0, 4 * G / 40), rep(1, 1 * G / 40), rep(0, 14 * G / 40), rep(1, 2 * G / 40), rep(0, 8 * G / 40), rep(1, 6 * G / 40), rep(0, 4 * G / 40),
rep(1, 5 * G / 40), rep(0, 15 * G / 40), rep(1, 10 * G / 40), rep(0, 10 * G / 40),
rep(1, 20 * G / 40), rep(0, 20 * G / 40),
rep(1, G)),
nrow=G, ncol=K),
alphavec=rep(1, K), snr=5)
# Concatenate results over t
ymat_list[[t]] <- data_t$ymat
lmat_list[[t]] <- data_t$lmat
zmat_list[[t]] <- data_t$zmat
tauvec_list[[t]] <- data_t$tauvec
alphavec_list[[t]] <- data_t$alphavec
}
# Concatenate all matrices
ymat_combined <- do.call(rbind, ymat_list)
lmat_combined <- do.call(rbind, lmat_list)
zmat_combined <- do.call(rbind, zmat_list)
tauvec_combined <- do.call(c, tauvec_list)  # assuming tauvec is a vector
alphavec_combined <- do.call(c, alphavec_list)  # assuming alphavec is a vector
# Save results to the specified directory in Arrow format
output_dir <- normalizePath(output_dir, mustWork = FALSE)
# Write each matrix to Arrow format (Feather or Parquet)
write_parquet(as.data.frame(ymat_combined), file.path(output_dir, "ymat.parquet"))
write_parquet(as.data.frame(lmat_combined), file.path(output_dir, "lmat.parquet"))
write_parquet(as.data.frame(zmat_combined), file.path(output_dir, "zmat.parquet"))
write_parquet(as.data.frame(tauvec_combined), file.path(output_dir, "tauvec.parquet"))
write_parquet(as.data.frame(alphavec_combined), file.path(output_dir, "alphavec.parquet"))
png(filename = file.path(output_dir, "connectivities.png"),
width = 1500,
height = 1000,
res = 250)
plot_faceted_zmat(zmat_list, G, K)
dev.off()
# Write each matrix to Arrow format (Feather or Parquet)
write_parquet(ymat_combined, file.path(output_dir, "ymat.parquet"))
as.matrix(zmat_list)
install.packages("abind")
library(abind)
# Concatenate all matrices
ymat_3d <- abind::abind(ymat_list, along = 3)
lmat_3d <- abind::abind(lmat_list, along = 3)
zmat_3d <- abind::abind(zmat_list, along = 3)
# Concatenate all matrices
ymat_3d <- abind::abind(ymat_list, along = 1)
lmat_3d <- abind::abind(lmat_list, along = 1)
zmat_3d <- abind::abind(zmat_list, along = 1)
View(ymat_3d)
# Concatenate all matrices
ymat_3d <- abind::abind(ymat_list, along = 3)
lmat_3d <- abind::abind(lmat_list, along = 3)
zmat_3d <- abind::abind(zmat_list, along = 3)
tauvec_combined <- abind::abind(tauvec_list, along = 2)  # assuming tauvec is a vector
alphavec_combined <- abind::abind(alphavec_list, along = 2)  # assuming alphavec is a vector
# Write each matrix to Arrow format (Feather or Parquet)
write_parquet(ymat_3d, file.path(output_dir, "ymat.parquet"))
as.data.frame.table(ymat_3d)
install.packages
install.packages("rhdf5")
library(rhdf5)
BiocManager::install("rhdf5")
library(rhdf5)
# Write each matrix to Arrow format (Feather or Parquet)
h5file <- file.path(output_dir, "arrays.h5")
# Write each matrix to Arrow format (Feather or Parquet)
h5createFile(h5file)
h5file <- file.path(output_dir, "arrays.h5")
h5createFile(h5file)
# Write each matrix to the HDF5 file
h5write(ymat_3d, h5file, "ymat")
h5write(lmat_3d, h5file, "lmat")
h5write(zmat_3d, h5file, "zmat")
# Write each vector to the HDF5 file
h5write(tauvec_combined, h5file, "tauvec")
h5write(alphavec_combined, h5file, "alphavec")
H5close()
View(ymat_list)
